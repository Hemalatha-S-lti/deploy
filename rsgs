<div class="home-container">
  <!-- Left Column: Prompt Section & History -->
  <div class="prompt-section">
    <div class="prompt-card">
      <h2 class="title">Azure AI search</h2>
      <p class="subtitle">AutoMates</p>

      <label class="sr-only" for="promptInput">Your prompt</label>
      <textarea
        id="promptInput"
        class="prompt-input"
        [(ngModel)]="prompt"
        placeholder="e.g., 'cloud architect with Azure skills'"
        (keydown.control.enter)="submitPrompt()"
        (keydown.meta.enter)="submitPrompt()"
      ></textarea>

      <div class="actions">
        <button
          class="clear-btn"
          type="button"
          (click)="clearPrompt()"
          [disabled]="!prompt.length || isSubmitting"
        >
          Clear
        </button>
        <button
          class="primary-btn"
          type="button"
          (click)="submitPrompt()"
          [disabled]="isSubmitDisabled"
        >
          <ng-container *ngIf="isSubmitting; else normalText">
            <span class="spinner"></span>
          </ng-container>
          <ng-template #normalText>
            <span>Find Candidates</span>
          </ng-template>
        </button>
      </div>
    </div>

    <!-- Section for previously submitted prompts with expandable summaries -->
    <div class="submitted-prompts" *ngIf="submittedPrompts.length > 0">
      <h3 class="submitted-title">Recent Searches</h3>
      <div
        class="prompt-card-small"
        *ngFor="let p of submittedPrompts.slice().reverse(); trackBy: trackByPrompt"
      >
        <div class="prompt-history-header" (click)="p.show = !p.show">
          <span>"<strong>{{ p.prompt }}</strong>" ({{ p.count }})</span>
          <span class="toggle-arrow" [class.rotated]="p.show">â–¼</span>
        </div>
        <div class="summary-content" *ngIf="p.show">
          <p>
            <strong>Summary:</strong> <em>{{ p.summary }}</em>
          </p>
        </div>
      </div>
    </div>
  </div>

  <!-- Right Column: Results Section -->
  <div class="results-section">
    <div *ngIf="results.length > 0; else placeholder">
      <div class="results-header">
        <h3>Showing {{ resultCount }} results for:</h3>
        <p class="last-prompt">"{{ lastPrompt }}"</p>
      </div>

      <div class="summary-card" *ngIf="summary">
        <h4>AI Summary</h4>
        <p>{{ summary }}</p>
      </div>

      <!-- Collapsible section for search details -->
      <details class="details-dropdown" *ngIf="intent || searchRequest">
        <summary>Show Search Details</summary>
        <div *ngIf="intent">
          <h4>Intent</h4>
          <pre class="code-block">{{ intent | json }}</pre>
        </div>
        <div *ngIf="searchRequest">
          <h4>Azure Search Request</h4>
          <pre class="code-block">{{ searchRequest | json }}</pre>
        </div>
      </details>

      <div class="profile-grid">
        <div
          class="profile-card"
          *ngFor="let profile of results; let i = index; trackBy: trackByRecordId"
          [style.animation-delay]="i * 100 + 'ms'"
        >
          <div class="profile-header">
            <div class="profile-avatar">{{ profile.Name | slice : 0 : 1 }}</div>
            <div class="profile-info">
              <h4 class="profile-name">{{ profile.Name }}</h4>
              <p class="profile-role">{{ profile.Role }}</p>
            </div>
          </div>
          <div class="profile-body">
            <p class="profile-summary">{{ profile.ProfileSummary }}</p>
            <div class="profile-details">
              <span><strong>Location:</strong> {{ profile.Location }}</span>
              <span><strong>Experience:</strong> {{ profile.ExperienceYears }} years</span>
              <span><strong>Industry:</strong> {{ profile.Industry }}</span>
            </div>
            <div class="profile-skills">
              <strong>Skills:</strong>
              <div class="skills-tags">
                <span *ngFor="let skill of profile.Skills.split(', ')" class="skill-tag">
                  {{ skill }}
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <ng-template #placeholder>
      <div class="placeholder">
        <div class="placeholder-icon">ðŸ“„</div>
        <h3>Your results will appear here</h3>
        <p>Enter a prompt to find candidates.</p>
      </div>
    </ng-template>
  </div>
</div>


import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { SearchService } from '../api/search-search';

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './home.html',
  styleUrls: ['./home.css'],
})
export class Home {
  prompt: string = '';
  isSubmitting = false;
  lastPrompt: string = '';

  submittedPrompts: { prompt: string; count: number; summary: string; show?: boolean }[] = [];
  results: any[] = [];
  resultCount: number = 0;
  summary: string = '';
  intent: any = null;
  searchRequest: any = null;

  constructor(private searchService: SearchService) {}

  submitPrompt(): void {
    const text = this.prompt.trim();
    if (!text || this.isSubmitting) return;

    this.isSubmitting = true;
    this.results = [];
    this.summary = '';
    this.intent = null;
    this.searchRequest = null;

    this.searchService.searchProfiles(text).subscribe({
      next: (response) => {
        this.lastPrompt = text;
        this.intent = response.intent;
        this.searchRequest = response.azure_search_request;
        this.results = response.results || [];
        this.summary = response.summary || '';
        this.resultCount = this.results.length;

        this.submittedPrompts.push({
          prompt: text,
          count: this.resultCount,
          summary: this.summary,
          show: false,
        });

        this.prompt = '';
        this.isSubmitting = false;
      },
      error: (err) => {
        console.error('API error:', err);
        this.isSubmitting = false;
      },
    });
  }

  clearPrompt(): void {
    if (this.isSubmitting) return;
    this.prompt = '';
  }

  get isSubmitDisabled(): boolean {
    return !(this.prompt ?? '').trim() || this.isSubmitting;
  }

  trackByPrompt(index: number, item: any) {
    return item.prompt;
  }

  trackByRecordId(index: number, item: any) {
    return item.recordid;
  }
}
