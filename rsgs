<div class="home-container">
  <!-- Prompt Section in Center -->
  <div class="prompt-section">
    <div class="prompt-card">
      <h2 class="title">Semantic Search</h2>
      <p class="subtitle">Explore Smart Insights</p>

      <label class="sr-only" for="promptInput">Your prompt</label>
      <textarea
        id="promptInput"
        class="prompt-input"
        [(ngModel)]="prompt"
        placeholder="Type here... e.g., 'cloud architect with Azure skills'"
        (keydown.control.enter)="submitPrompt()"
        (keydown.meta.enter)="submitPrompt()"
      ></textarea>

      <div class="actions">
        <button
          class="clear-btn"
          type="button"
          (click)="clearPrompt()"
          [disabled]="!prompt.length || isSubmitting"
        >
          Clear
        </button>
        <button
          class="primary-btn"
          type="button"
          (click)="submitPrompt()"
          [disabled]="isSubmitDisabled"
        >
          <span *ngIf="isSubmitting" class="spinner"></span>
          <span *ngIf="!isSubmitting">Find Insights</span>
        </button>
      </div>
    </div>

    <!-- Previously Submitted Prompts -->
    <div *ngIf="submittedPrompts.length > 0" class="submitted-prompts">
      <h3 class="submitted-title">Recent Searches</h3>
      <div *ngFor="let p of submittedPrompts.slice().reverse()" class="prompt-card-small">
        <div class="prompt-history-header" (click)="p.show = !p.show">
          "<strong>{{ p.prompt }}</strong>" ({{ p.count }})
          <span class="toggle-arrow" [class.rotated]="p.show">â–¼</span>
        </div>
        <div *ngIf="p.show" class="summary-content">
          <p>
            <strong>Summary:</strong> <em>{{ p.summary }}</em>
          </p>
        </div>
      </div>
    </div>
  </div>

  <!-- Results Section -->
  <div class="results-section">
    <div *ngIf="results.length > 0">
      <div class="results-header">
        <h3>Showing {{ resultCount }} results for:</h3>
        <p class="last-prompt">"{{ lastPrompt }}"</p>
      </div>

      <div *ngIf="summary" class="summary-card">
        <h4>AI Summary</h4>
        <p>{{ summary }}</p>
      </div>

      <details *ngIf="intent || searchRequest" class="details-dropdown">
        <summary>Show Search Details</summary>
        <div *ngIf="intent">
          <h4>Intent</h4>
          <pre class="code-block">{{ intent | json }}</pre>
        </div>
        <div *ngIf="searchRequest">
          <h4>Azure Search Request</h4>
          <pre class="code-block">{{ searchRequest | json }}</pre>
        </div>
      </details>

      <div class="profile-grid">
        <div *ngFor="let profile of results; let i = index" class="profile-card" [style.animation-delay]="i * 100 + 'ms'">
          <div class="profile-header">
            <div class="profile-avatar">{{ profile.Name | slice:0:1 }}</div>
            <div class="profile-info">
              <h4 class="profile-name">{{ profile.Name }}</h4>
              <p class="profile-role">{{ profile.Role }}</p>
            </div>
          </div>
          <div class="profile-body">
            <p class="profile-summary">{{ profile.ProfileSummary }}</p>
            <div class="profile-details">
              <span><strong>Location:</strong> {{ profile.Location }}</span>
              <span><strong>Experience:</strong> {{ profile.ExperienceYears }} years</span>
              <span><strong>Industry:</strong> {{ profile.Industry }}</span>
            </div>
            <div class="profile-skills">
              <strong>Skills:</strong>
              <div class="skills-tags">
                <span *ngFor="let skill of profile.Skills.split(', ')" class="skill-tag">{{ skill }}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div *ngIf="results.length === 0" class="placeholder">
      <div class="placeholder-icon">ðŸ“„</div>
      <h3>Your insights will appear here</h3>
      <p>Type a prompt to explore smart results.</p>
    </div>
  </div>
</div>


:root {
  --background-dark: #121212;
  --background-light: #1e1e1e;
  --primary-color: #3f51b5;
  --primary-hover: #303f9f;
  --text-primary: #ffffff;
  --text-secondary: #b0b0b0;
  --border-color: #333333;
  --card-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
}

html, body {
  height: 100%;
  margin: 0;
  font-family: 'Segoe UI', 'Roboto', sans-serif;
  background-color: var(--background-dark);
  color: var(--text-primary);
}

.home-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  padding: 2rem;
  min-height: 100vh;
}

/* Centered Prompt Section */
.prompt-section {
  width: 100%;
  max-width: 600px;
  background-color: var(--background-light);
  padding: 2rem;
  border-radius: 12px;
  border: 1px solid var(--border-color);
  box-shadow: var(--card-shadow);
  margin-bottom: 2rem;
}

/* Title & Subtitle */
.title {
  font-size: 2.5rem;
  font-weight: 700;
  color: var(--primary-color);
  margin: 0;
  text-align: center;
}

.subtitle {
  font-size: 1.2rem;
  color: var(--text-secondary);
  margin: 0.5rem 0 2rem 0;
  text-align: center;
}

/* Prompt Input */
.prompt-input {
  width: 100%;
  min-height: 180px;
  background-color: #2c2c2c;
  color: #ffffff;
  font-size: 1.1rem;
  font-weight: 500;
  font-family: 'Segoe UI', 'Roboto', sans-serif;
  border: 1px solid var(--border-color);
  border-radius: 12px;
  padding: 1rem;
  resize: vertical;
  outline: none;
}

.prompt-input::placeholder {
  color: #bbbbbb;
  font-style: italic;
}

/* Actions Buttons */
.actions {
  display: flex;
  justify-content: center;
  gap: 1rem;
  margin-top: 1.5rem;
}

.clear-btn,
.primary-btn {
  padding: 0.8rem 2rem;
  font-size: 1rem;
  font-weight: 600;
  border-radius: 10px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.clear-btn {
  background-color: transparent;
  color: var(--text-secondary);
  border: 1px solid var(--border-color);
}

.clear-btn:hover {
  background-color: #333;
}

.primary-btn:not(:disabled) {
  background-color: var(--primary-color);
  color: var(--text-primary);
  display: flex;
  align-items: center;
  justify-content: center;
}

.primary-btn:not(:disabled):hover {
  background-color: var(--primary-hover);
}

.primary-btn:disabled {
  background-color: #555;
  color: #a0a0a0;
  cursor: not-allowed;
}

.spinner {
  width: 20px;
  height: 20px;
  border: 3px solid rgba(255,255,255,0.3);
  border-top-color: #fff;
  border-radius: 50%;
  animation: spin 1s ease-in-out infinite;
}

@keyframes spin { to { transform: rotate(360deg); } }

/* Submitted Prompts & Summary */
.submitted-prompts { margin-top: 16px; }
.submitted-title { text-align: center; font-weight: 600; font-size: 1rem; color: var(--primary-color); }
.prompt-card-small { background: rgba(141,148,179,0.2); padding: 10px 14px; border-radius: 12px; margin-bottom: 8px; }
.summary-content { margin-top: 0.5rem; padding: 0.75rem 1rem; background-color: rgba(255,255,255,0.05); border-left: 4px solid #00bcd4; border-radius: 6px; }

/* Results Section */
.results-section { width: 100%; max-width: 900px; }

.profile-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 1.5rem; }

.profile-card { background-color: var(--background-light); border: 1px solid var(--border-color); border-radius: 12px; padding: 1.5rem; box-shadow: 0 4px 15px rgba(0,0,0,0.3); opacity: 0; transform: translateY(20px); animation: slideInUp 0.5s forwards; }

.profile-header { display: flex; align-items: center; margin-bottom: 1rem; }
.profile-avatar { width:50px; height:50px; border-radius:50%; background-color:var(--primary-color); color:white; display:flex; align-items:center; justify-content:center; font-size:1.5rem; font-weight:600; margin-right:1rem; }
.profile-name { margin:0; font-size:1.25rem; }
.profile-role { margin:0; color:var(--text-secondary); }

.profile-body { margin-top: 0.5rem; }
.profile-summary { margin-bottom:1rem; color:var(--text-secondary); }
.profile-details { display:flex; flex-wrap:wrap; gap:1rem; margin-bottom:1rem; font-size:0.9rem; }
.skills-tags { display:flex; flex-wrap:wrap; gap:0.5rem; margin-top:0.5rem; }
.skill-tag { background-color:#333; color:var(--text-secondary); padding:0.25rem 0.75rem; border-radius:15px; font-size:0.8rem; }

.placeholder { display:flex; flex-direction:column; align-items:center; justify-content:center; height:100%; text-align:center; color:var(--text-secondary); }
.placeholder-icon { font-size:4rem; margin-bottom:1rem; }

@keyframes slideInUp { from { opacity:0; transform:translateY(20px); } to { opacity:1; transform:translateY(0); } }


import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { SearchService } from '../api/search-search';

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './home.html',
  styleUrl: './home.css',
})
export class Home {
  prompt: string = '';
  isSubmitting = false;
  lastPrompt: string = '';
  submittedPrompts: { prompt: string; count: number; summary: string; show?: boolean }[] = [];
  results: any[] = [];
  resultCount: number = 0;
  summary: string = '';
  intent: any = null;
  searchRequest: any = null;

  constructor(private searchService: SearchService) {}

  submitPrompt(): void {
    const text = this.prompt.trim();
    if (!text || this.isSubmitting) return;

    this.isSubmitting = true;
    this.results = [];
    this.summary = '';
    this.intent = null;
    this.searchRequest = null;

    this.searchService.searchProfiles(text).subscribe({
      next: (response) => {
        this.lastPrompt = text;
        this.intent = response.intent;
        this.searchRequest = response.azure_search_request;
        this.results = response.results || [];
        this.summary = response.summary || '';
        this.resultCount = this.results.length;
        this.submittedPrompts.push({ prompt: text, count: this.resultCount, summary: this.summary, show: false });
        this.prompt = '';
        this.isSubmitting = false;
      },
      error: () => { this.isSubmitting = false; },
    });
  }

  clearPrompt(): void { if (!this.isSubmitting) this.prompt = ''; }
  get isSubmitDisabled(): boolean { return !(this.prompt ?? '').trim() || this.isSubmitting; }
}
