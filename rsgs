:host {
  --primary-color: #00bfff; /* Deep Sky Blue */
  --background-color: #1a1a1a;
  --text-color: #e0e0e0;
  --panel-bg-color: #2a2a2a;
  --border-color: #444;
}

.jarvis-container {
  max-width: 800px;
  margin: 2rem auto;
  padding: 2rem;
  background-color: var(--background-color);
  color: var(--text-color);
  border-radius: 15px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

header {
  text-align: center;
  margin-bottom: 2rem;
}

header h1 {
  color: var(--primary-color);
  margin: 0;
  letter-spacing: 4px;
}

.mic-container {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 1rem;
}

.mic-button {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  background: var(--panel-bg-color);
  border: 3px solid var(--primary-color);
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
  transition: all 0.3s ease;
  box-shadow: 0 0 15px rgba(0, 191, 255, 0.3);
  z-index: 2;
}

.mic-button:hover {
  box-shadow: 0 0 25px var(--primary-color);
}

.mic-button.listening {
  background: var(--primary-color);
  box-shadow: 0 0 30px var(--primary-color);
}

.mic-button:disabled,
.mic-button.initializing {
  cursor: wait;
  background-color: #444;
  border-color: #777;
  box-shadow: none;
}

.mic-icon {
  font-size: 3rem;
}

/* New Spinner Styles */
.mic-icon.loading-spinner {
  width: 40px;
  height: 40px;
  border: 5px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: var(--primary-color);
  animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.pulse-ring {
  position: absolute;
  width: 100px;
  height: 100px;
  border: 3px solid var(--primary-color);
  border-radius: 50%;
  opacity: 0;
  transform: scale(1);
  z-index: 1;
}

.pulse-ring.active {
  animation: pulse 1.5s infinite;
}

@keyframes pulse {
  0% {
    transform: scale(1);
    opacity: 0.8;
  }
  100% {
    transform: scale(2);
    opacity: 0;
  }
}

.status {
  text-align: center;
  font-size: 1.1rem;
  min-height: 24px;
}

.listening-text {
  color: var(--primary-color);
}
.speaking-text {
  color: #ffdb58;
} /* Mustard Yellow */
.initializing-text {
  color: #aaa;
} /* New status text color */

.speaking-visualizer {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 50px;
  opacity: 0;
  transition: opacity 0.3s ease;
  margin-top: -20px;
  margin-bottom: 1rem;
}

.speaking-visualizer.active {
  opacity: 1;
}

.speaking-visualizer .bar {
  width: 8px;
  height: 5px;
  margin: 0 3px;
  background-color: var(--primary-color);
  border-radius: 5px;
  animation: speak-wave 1.2s infinite ease-in-out;
}

.speaking-visualizer .bar:nth-child(2) {
  animation-delay: 0.2s;
}
.speaking-visualizer .bar:nth-child(3) {
  animation-delay: 0.4s;
}
.speaking-visualizer .bar:nth-child(4) {
  animation-delay: 0.6s;
}
.speaking-visualizer .bar:nth-child(5) {
  animation-delay: 0.8s;
}

@keyframes speak-wave {
  0%,
  100% {
    transform: scaleY(1);
  }
  50% {
    transform: scaleY(5);
  }
}

.transcript-panel {
  background: var(--panel-bg-color);
  padding: 1.5rem;
  border-radius: 10px;
  min-height: 60px;
  border: 1px solid var(--border-color);
  margin-bottom: 1rem;
}

.transcript .final {
  color: var(--text-color);
  font-weight: bold;
}
.transcript .partial {
  color: #aaa;
}
.transcript .placeholder {
  color: #666;
}

.controls-panel {
  text-align: center;
  margin-bottom: 2rem;
}

.search-button {
  padding: 12px 25px;
  background-color: var(--primary-color);
  border: none;
  color: #fff;
  border-radius: 5px;
  cursor: pointer;
  font-size: 1rem;
  transition: background-color 0.3s;
}

.search-button:disabled {
  background-color: #555;
  cursor: not-allowed;
}
.error-message {
  color: #ff4d4d;
  text-align: center;
}

.results-container,
.history-container {
  margin-top: 2rem;
  padding-top: 1rem;
  border-top: 1px solid var(--border-color);
}

.summary-panel {
  background: rgba(0, 191, 255, 0.1);
  padding: 1rem;
  border-radius: 5px;
  margin-bottom: 1rem;
}

.summary-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 0.5rem;
}

.summary-header h4 {
  margin: 0;
}

.speak-button {
  padding: 8px 15px;
  background-color: var(--primary-color);
  border: none;
  color: #fff;
  border-radius: 5px;
  cursor: pointer;
  font-size: 0.9rem;
  transition: background-color 0.3s;
}

.speak-button:disabled {
  background-color: #555;
  cursor: not-allowed;
}

.details-dropdown {
  background: var(--panel-bg-color);
  border-radius: 5px;
  padding: 0.5rem 1rem;
  border: 1px solid var(--border-color);
}

.details-dropdown summary {
  cursor: pointer;
  font-weight: bold;
  color: var(--primary-color);
}

.code-block {
  background-color: #111;
  padding: 1rem;
  border-radius: 5px;
  white-space: pre-wrap;
  word-wrap: break-word;
  color: #ccc;
}

.history-item {
  background: var(--panel-bg-color);
  padding: 1rem;
  border-radius: 5px;
  margin-bottom: 1rem;
  border-left: 3px solid var(--primary-color);
}


<div class="jarvis-container">
  <header>
    <h1>AutoMates</h1>
    <p>Voice Assistant</p>
  </header>

  <div class="mic-container">
    <button
      class="mic-button"
      [class.listening]="isListening()"
      [class.initializing]="micInitializing()"
      (click)="toggleMic()"
      [disabled]="micInitializing()"
      aria-label="Toggle Voice Search"
    >
      @if (micInitializing()) {
      <span class="mic-icon loading-spinner"></span>
      } @else {
      <span class="mic-icon">üéôÔ∏è</span>
      }
    </button>
    <div class="pulse-ring" [class.active]="isPulsing()"></div>
  </div>

  <div class="status">
    @if (micInitializing()) {
    <p class="initializing-text">Initializing microphone...</p>
    } @else if (isListening()) {
    <p class="listening-text">Listening...</p>
    } @else if (isSpeaking()) {
    <p class="speaking-text">Speaking...</p>
    } @else {
    <p>Press the button to start.</p>
    }
  </div>

  <!-- AI Speaking Visualizer -->
  <div class="speaking-visualizer" [class.active]="isSpeaking()">
    <div class="bar"></div>
    <div class="bar"></div>
    <div class="bar"></div>
    <div class="bar"></div>
    <div class="bar"></div>
  </div>

  <div class="transcript-panel">
    <p class="transcript">
      <span class="final">{{ final$() }}</span>
      @if (partial$()) {
      <span class="partial">{{ partial$() }}</span>
      } @if (!final$() && !partial$()) {
      <span class="placeholder">Your command will appear here...</span>
      }
    </p>
  </div>

  <div class="controls-panel">
    <button class="search-button" [disabled]="sending() || !final$()" (click)="sendToSearch()">
      {{ sending() ? 'Searching...' : 'Send to Search' }}
    </button>
  </div>

  @if (errorMsg()) {
  <p class="error-message">{{ errorMsg() }}</p>
  } @if (lastSummary() || results().length > 0) {
  <div class="results-container">
    <h3>Current Result</h3>
    @if (lastSummary()) {
    <div class="summary-panel">
      <div class="summary-header">
        <h4>Summary</h4>
        <button class="speak-button" (click)="speakSummary()" [disabled]="isSpeaking()">
          {{ isSpeaking() ? 'Speaking...' : 'Speak' }}
        </button>
      </div>
      <p>{{ lastSummary() }}</p>
    </div>
    }

    <details class="details-dropdown">
      <summary>Show Records & Search Details</summary>
      @if (intent()) {
      <p><strong>Intent:</strong> {{ intent() }}</p>
      } @if (searchRequest()) {
      <h4>Azure Search Request</h4>
      <pre class="code-block">{{ searchRequest() | json }}</pre>
      } @if (results().length) {
      <h4>Retrieved Records ({{ results().length }})</h4>
      <ol>
        @for (r of results(); track r) {
        <li>
          <pre class="code-block">{{ r | json }}</pre>
        </li>
        }
      </ol>
      }
    </details>
  </div>
  } @if (searchHistory().length > 0) {
  <div class="history-container">
    <h3>Session History</h3>
    @for (item of searchHistory().slice().reverse(); track item.timestamp) {
    <div class="history-item">
      <p><strong>Query:</strong> "{{ item.query }}"</p>
      @if (item.summary) {
      <p><strong>Summary:</strong> {{ item.summary }}</p>
      }
      <details class="details-dropdown">
        <summary>View Retrieved Records ({{ item.results.length }})</summary>
        <ol>
          @for (r of item.results; track r) {
          <li>
            <pre class="code-block">{{ r | json }}</pre>
          </li>
          }
        </ol>
      </details>
    </div>
    }
  </div>
  }
</div>

import { environment } from '../../environments/environment';
import { Component, OnInit, signal, computed } from '@angular/core';
import { CommonModule, JsonPipe } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { firstValueFrom } from 'rxjs';
import { Speech } from '../service/speech';
import { Search, SearchResponse } from '../service/search';

type SearchHistoryItem = {
  query: string;
  summary: string;
  results: any[];
  timestamp: Date;
};

@Component({
  selector: 'app-voice',
  imports: [CommonModule, FormsModule, JsonPipe],
  templateUrl: './voice.html',
  styleUrl: './voice.css',
})
export class Voice implements OnInit {
  topK = environment.search?.default_topk ?? 3;
  sending = signal(false);
  errorMsg = signal('');
  intent = signal<string>('');
  searchRequest = signal<any>(null);
  results = signal<any[]>([]);
  lastSummary = signal('');
  isSpeaking = signal(false);
  micInitializing = signal(false); // New state for initialization
  searchHistory = signal<SearchHistoryItem[]>([]);

  constructor(private speech: Speech, private search: Search) {}

  partial$ = signal('');
  final$ = signal('');

  isPulsing = computed(
    () => this.isListening() && (this.partial$() !== '' || this.final$() !== '')
  );

  ngOnInit() {
    this.partial$ = this.speech.partialText;
    this.final$ = this.speech.finalText;
  }

  isListening() {
    return this.speech.isListening();
  }

  async toggleMic() {
    this.errorMsg.set('');

    // If already listening, the only action is to stop.
    if (this.isListening()) {
      this.speech.stopListening();
      return;
    }

    // Prevent multiple clicks while the mic is starting up.
    if (this.micInitializing()) {
      return;
    }

    this.micInitializing.set(true);
    try {
      this.clearAll();
      await this.speech.startListening();
    } catch (e: any) {
      this.errorMsg.set(e?.message ?? 'Microphone error');
    } finally {
      this.micInitializing.set(false); // Reset state regardless of success or failure
    }
  }

  clearAll() {
    this.speech.resetTranscript();
    this.clearSearchResults();
  }

  clearSearchResults() {
    this.intent.set('');
    this.searchRequest.set(null);
    this.results.set([]);
    this.lastSummary.set('');
    this.errorMsg.set('');
  }

  async sendToSearch() {
    const prompt = this.final$().trim();
    if (!prompt) {
      this.errorMsg.set('Please speak first before searching.');
      return;
    }

    if (this.isListening()) {
      this.speech.stopListening();
    }

    this.sending.set(true);
    this.clearSearchResults();

    try {
      const res: SearchResponse = await firstValueFrom(
        this.search.searchProfiles(prompt, this.topK)
      );

      this.intent.set(res.intent || '');
      this.searchRequest.set(res.azure_search_request ?? null);
      this.results.set(res.results ?? []);
      this.lastSummary.set((res.summary ?? '').trim());

      if (this.lastSummary() || this.results().length > 0) {
        this.searchHistory.update((history) => [
          ...history,
          {
            query: prompt,
            summary: this.lastSummary(),
            results: this.results(),
            timestamp: new Date(),
          },
        ]);
      }
    } catch (e: any) {
      this.errorMsg.set(e?.message ?? 'Search API failed');
    } finally {
      this.sending.set(false);
    }
  }

  async speakSummary() {
    if (this.lastSummary()) {
      this.isSpeaking.set(true);
      await this.speech.speak(this.lastSummary());
      this.isSpeaking.set(false);
    }
  }
}
