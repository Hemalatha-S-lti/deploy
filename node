const express = require("express");
const axios = require("axios");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());

// ------------------------
// Cognitive Search Config
// ------------------------
const COG_SEARCH_SERVICE = "<YOUR_SEARCH_SERVICE>";
const COG_SEARCH_KEY = "<YOUR_SEARCH_ADMIN_KEY>";
const INDEX_NAME = "products-index";

// ------------------------
// AI Foundry / GPT Config
// ------------------------
const OPENAI_RESOURCE = "https://<YOUR_FOUNDY_ENDPOINT>";
const OPENAI_KEY = "<YOUR_API_KEY>";
const GPT_DEPLOYMENT = "<YOUR_DEPLOYMENT_NAME>";
const API_VERSION = "2023-03-15-preview";

// ------------------------
// Endpoint to handle frontend query
// ------------------------
app.post("/api/query", async (req, res) => {
  const prompt = req.body.prompt;

  try {
    // 1️⃣ Query Cognitive Search
    const searchResponse = await axios.get(
      `https://${COG_SEARCH_SERVICE}.search.windows.net/indexes/${INDEX_NAME}/docs`,
      {
        params: { 
          'api-version': '2021-04-30-Preview',
          search: prompt
        },
        headers: {
          "api-key": COG_SEARCH_KEY
        }
      }
    );

    const searchResults = searchResponse.data.value;

    // Prepare text for GPT
    let combinedText = "Products found:\n";
    searchResults.forEach((item, idx) => {
      combinedText += `${idx + 1}. ${item.productName} - ${item.price}\n`;
    });
    combinedText += `\nAnswer the user query: ${prompt}`;

    // 2️⃣ Call GPT deployment
    const gptResponse = await axios.post(
      `${OPENAI_RESOURCE}/openai/deployments/${GPT_DEPLOYMENT}/chat/completions?api-version=${API_VERSION}`,
      {
        messages: [{ role: "user", content: combinedText }]
      },
      {
        headers: {
          "Content-Type": "application/json",
          "api-key": OPENAI_KEY
        }
      }
    );

    const gptText = gptResponse.data.choices[0].message.content;

    // 3️⃣ Send JSON to frontend
    res.json({
      searchResults: searchResults,
      gptResponse: gptText
    });
    
  } catch (error) {
    console.error(error.response ? error.response.data : error.message);
    res.status(500).json({ error: "Something went wrong" });
  }
});

// ------------------------
// Start Server
// ------------------------
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Backend running at http://localhost:${PORT}`);
});
